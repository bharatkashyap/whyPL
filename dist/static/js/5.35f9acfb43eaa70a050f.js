webpackJsonp([5],{V41f:function(module,__webpack_exports__,__webpack_require__){"use strict";eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// EXTERNAL MODULE: ./src/Components/CardBar.vue + 4 modules\nvar CardBar = __webpack_require__(\"kQ2W\");\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/Components/BigHittingPanel.vue\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var BigHittingPanel = ({\n  name: 'BigHittingPanel',\n  data: function data() {\n    return {\n      stats: [{\n        id: 0,\n        type: 'bar',\n        title: '13',\n        subtitle: 'Chennai have scored the highest ever number of 200+ scores across seasons',\n        description: 'Delhi round up the list with only a single 200+ score in 131 matches',\n        data: {\n          labels: ['Delhi Daredevils', 'Deccan Chargers', 'Kolkata Knight Riders', 'Sunrisers Hyderabad', 'Rajasthan Royals', 'Mumbai Indians', 'Kings XI Punjab', 'Royal Challengers Bangalore', 'Chennai Super Kings'],\n          datasets: [{\n            label: '200+ scores',\n            backgroundColor: 'rgba(0,220,174,1)',\n            data: [1, 1, 3, 3, 6, 7, 11, 11, 13],\n            borderColor: 'rgba(0,0,0,0.5)',\n            lineTension: 0,\n            pointBackgroundColor: 'rgba(233,123,68,1)',\n            fill: false\n          }]\n        },\n        options: {\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxTicksLimit: 5\n              }\n            }],\n            xAxes: [{\n              ticks: {\n                autoSkip: true,\n                autoSkipPadding: 20,\n                maxRotation: 0\n              }\n            }]\n          },\n          legend: {\n            display: false\n          },\n          layout: {\n            padding: {\n              top: 20\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      }, {\n        id: 1,\n        type: 'bar',\n        title: 'Strike rates are off the charts',\n        subtitle: 'Virender Sehwag has the highest strike rate across all batsmen, across all seasons',\n        description: 'Considering runs scored to balls faced ratio for batsmen having scored more than 1,000 runs in nine seasons',\n        data: {\n          labels: ['Sehwag', 'de Villiers', 'Gayle', 'Y Pathan', 'Pollard'],\n          datasets: [{\n            label: 'Strike rate',\n            backgroundColor: 'rgba(90,220,214,1)',\n            data: [148.82705946535734, 146.57104437471986, 146.0593220338983, 142.29390681003585, 141.95652173913044],\n            borderColor: 'rgba(0,0,0,0.5)'\n          }]\n        },\n        options: {\n          scales: {\n            yAxes: [{\n              ticks: {\n                beginAtZero: true,\n                maxTicksLimit: 5\n              }\n            }],\n            xAxes: [{\n              ticks: {\n                autoSkip: true,\n                autoSkipPadding: 20,\n                maxRotation: 0\n              }\n            }]\n          },\n          legend: {\n            display: false\n          },\n          layout: {\n            padding: {\n              top: 20\n            }\n          },\n          responsive: true,\n          maintainAspectRatio: false\n        }\n      }]\n    };\n  },\n\n  components: {\n    cardBar: CardBar[\"a\" /* default */]\n  }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-2a3f05a0\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/Components/BigHittingPanel.vue\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{},_vm._l((_vm.stats),function(stat){return (stat.type == 'bar')?_c('cardBar',{key:stat.id,attrs:{\"data\":stat.data,\"options\":stat.options,\"title\":stat.title,\"subtitle\":stat.subtitle,\"description\":stat.description}}):_vm._e()}))}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ var Components_BigHittingPanel = (esExports);\n// CONCATENATED MODULE: ./src/Components/BigHittingPanel.vue\nfunction injectStyle (ssrContext) {\n  __webpack_require__(\"pBfM\")\n}\nvar normalizeComponent = __webpack_require__(\"VU/8\")\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-2a3f05a0\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  BigHittingPanel,\n  Components_BigHittingPanel,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ var src_Components_BigHittingPanel = __webpack_exports__[\"default\"] = (Component.exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///V41f\n")},pBfM:function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicEJmTS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0JpZ0hpdHRpbmdQYW5lbC52dWU/N2I1ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbi9kaXN0L2xvYWRlci5qcz97XCJvbWl0XCI6MSxcInJlbW92ZVwiOnRydWV9IS4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlcj97XCJzb3VyY2VNYXBcIjp0cnVlfSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlcj97XCJ2dWVcIjp0cnVlLFwiaWRcIjpcImRhdGEtdi0yYTNmMDVhMFwiLFwic2NvcGVkXCI6dHJ1ZSxcImhhc0lubGluZUNvbmZpZ1wiOmZhbHNlfSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL0NvbXBvbmVudHMvQmlnSGl0dGluZ1BhbmVsLnZ1ZVxuLy8gbW9kdWxlIGlkID0gcEJmTVxuLy8gbW9kdWxlIGNodW5rcyA9IDUiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///pBfM\n")}});